

from astropy.io import fits
import numpy as np
import pandas as pd


def createImage(outFile,parms):
    
    """
    create a FITS file for a METIS image.  Output will depend on parms file. 
    A basic parms file can be generated by calling makeBasicParameters, and modified
    as desired. 

    If parms['instrument'] is in ["lm","n","lss"] a  2D image will be produced.

    if parms['instrument'] is in ["ifu_image"] four 2D images will be produced.

    if parms['instrument'] is in ["ifu_cube"] four 3D cubes will be produced. 

    if parms['instrument'] is in ["lss_spectrum"] a  1D spectrum will be produced. 

    
    if parms['error'] is None a raw image will be produced, otherwise parms['error'] and parms['quality']
    are expected to be set, and three extensions will be produced for each data extention. 

    if parms['data'][i]['data'] is set to None, then an array with dimensions given by parms['defaultSize'],
    set to zeros, will be generated (i = 0 except for IFU, where i = range(4).)

    If parms['header'][i] is set to a header, all values in that header will be copied over. 
    
    After that, if parms['keywords'][i] contains keywords, they will be written to the header, overwriting
    existing values for that keyword. 

    Finally, if parms['delkey'][i] contains a list of keywords, those keywords will be removed from teh 
    header (\TODO!)

    The header keywords for the extension names will be forced into the ESO specified values.
    """
    
    # create the primary HDU
    primaryHDU = fits.PrimaryHDU()
    primaryHDU = updateHeader(primaryHDU,parms['primary'])
    hduList = [primaryHDU]

    # if this is for IFU there will be 4 sets of 3 extensions, otherwise
    # one set of three
    
    for i in range(len((parms['data']))):

        # if there is data provided, copy it over, otherwise create
        # empty array
        if(parms['data'][i]['data'] is None):
            imageHDU = fits.ImageHDU(np.zeros(parms['defaultSize']))
        else:
            imageHDU = fits.ImageHDU(parms['data'][i]['data'])

        # update the header
        imageHDU = updateHeader(imageHDU,parms['data'][i])

        # add required names/classes
        imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.sci'
        imageHDU.header['HDUCLAS1'] = "IMAGE"
        imageHDU.header['HDUCLAS2'] = "DATA"
        imageHDU.header['HDUCLAS3'] = ""

        # if this is a processed image, keywords for the other extentions
        if(parms['error'] is not None):    
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.err'
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.dq'

        
        #add to the HDU list
        hduList.append(imageHDU)

        # repeat this for the mask image and the error image for processed images
        if(parms['error'] is not None):    
            
            if(parms['quality'][i]['data'] is None):
                qualityHDU = fits.ImageHDU(np.zeros(parms['defaultSize']).astype('int'))
            else:
                qualityHDU = fits.ImageHDU(parms['quality'][i]['data'])
            qualityHDU = updateHeader(qualityHDU,parms['quality'][i])
            imageHDU.header['EXTNAME'] = "LM.DQ"
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.dq'
            imageHDU.header['HDUCLAS1'] = "IMAGE"
            imageHDU.header['HDUCLAS2'] = "QUALITY"
            imageHDU.header['HDUCLAS3'] = "FLAG32BIT"
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.err'
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.sci'
            hduList.append(qualityHDU)
            
            if(parms['error'][i]['data'] is None):
                errorHDU = fits.ImageHDU(np.zeros(parms['defaultSize']))
            else:
                errorHDU = fits.ImageHDU(parms['error'][i]['data'])
            errorHDU = updateHeader(errorHDU,parms['error'][i])
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.err'
            imageHDU.header['HDUCLAS1'] = "IMAGE"
            imageHDU.header['HDUCLAS2'] = "ERROR"
            imageHDU.header['HDUCLAS3'] = "RMSE" 
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.dq'
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.sci'
            hduList.append(errorHDU)

    # create the full HDU
    hdu = fits.HDUList(hduList)

    # and dumpt to file
    hdu.writeto(outFile,overwrite = True)
    


def makeBasicParameters(mode,instrument):

    """
    Create a basic parameter structure

    mode:
       raw: raw data
       processed: processed data
       spectrum: spectrum

    instrument
         lm
         n
         lss
         ifu_image
         ifu_cube
         lss_spectrum

    returns: dictionary structure. The same basic sructure is used for IFU and images;
    there will be a list of four items for IFU, or a list of 1 for non IFU.

    ??TODO Need to add spectrum
    ??TODO Need to add cube

    """

    # initialize structure
    parms = {}
    
    # primary HDU
    parms['primary'] = {}
    parms['primary']['header'] = None
    parms['primary']['keywords'] = None

    if(instrument) == 'ifu':
        parms['instrument'] = ['IFU1','IFU2','IFU3','IFU4']
        parms['defaultSize'] = [2000,2000]

    if(instrument) == 'ifu_cube':
        parms['instrument'] = ['IFU1','IFU2','IFU3','IFU4']
        parms['defaultSize'] = [2000,2000,500]
        
    if(instrument in ['lm','n','lss']):
        parms['instrument'] = [instrument]
        parms['defaultSize'] = [2000,2000]

    if(instrument in ["lss_spectrum"]):
        parms['instrument'] = ["LSS"]
        parms['defaultSize'] = [2000]


    # a single HDU section has data (or None), a header to be copied (or None) and
    # a dictionary of additional keywords to be added (or None)
    
    if(mode == "raw"):
        if(instrument in ["lm","n","lss","lss_spectrum"]):
           parms['data'] = [{}]
           parms['data'][0]['data'] = None
           parms['data'][0]['header'] = None
           parms['data'][0]['keywords'] = {}

           parms['quality'] = None
           parms['error'] = None
           
           
        elif(instrument in  ["ifu","ifu_cube"]):
           parms['data'] = []
           parms['quality'] = None
           parms['error'] = None

           for i in range(4):
               parms['data'].append({})
               parms['data'][i]['data'] = None
               parms['data'][i]['header'] = None
               parms['data'][i]['keywords'] = {}
               
    elif(mode == "processed"):
        if(instrument in ["lm","n","lss"]):
           parms['data'] = [{}]
           parms['data'][0]['data'] = None
           parms['data'][0]['header'] = None
           parms['data'][0]['keywords'] = {}

           parms['error'] = [{}]
           parms['error'][0]['data'] = None
           parms['error'][0]['header'] = None
           parms['error'][0]['keywords'] = {}

           parms['quality'] = [{}]
           parms['quality'][0]['data'] = None
           parms['quality'][0]['header'] = None
           parms['quality'][0]['keywords'] = {}
            
        elif(instrument in ["ifu","ifu_cube"]):

            parms['data'] = []
            parms['quality'] = []
            parms['error'] = []
            
            for i in range(4):
               parms['data'].append({})
               parms['quality'].append({})
               parms['error'].append({})
               
               parms['data'][i]['data'] = None
               parms['data'][i]['header'] = None
               parms['data'][i]['keywords'] = {}

               parms['error'][i]['data'] = None
               parms['error'][i]['header'] = None
               parms['error'][i]['keywords'] = {}

               parms['quality'][i]['data'] = None
               parms['quality'][i]['header'] = None
               parms['quality'][i]['keywords'] = {}


           
    return parms
    
def updateHeader(HDU,parms):
    
    """add header keywords"""

    # first, see if there is a header provided. If so, copy over keywords
    
    if(parms['header'] is not None):
        for elem in parms['header']:
            HDU.header[elem] = parms['header'][elem]

    # now add/overwrite keywords in keyword dictionary
    if(parms['keywords'] is not None):
        for elem in parms['keywords']:
            HDU.header[elem]=parms['keywords'][elem]
            
    return HDU
